shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?datatable
shiny::runApp()
?DT::datatable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("~/Dropbox/MES PROJETS/PROJET DE LOGICIEL D'ANALYSE FOLIAIRE/appGaussian2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?CastData
runApp()
runApp()
library(rdrop2)
install.packages("rdrop2")
runApp()
runApp()
setwd("~/Dropbox/MES PROJETS/PROJET DE LOGICIEL D'ANALYSE FOLIAIRE/appGaussian2")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?adminlte_color
runApp()
runApp()
runApp()
runApp()
?adminlte_color
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(xgboost)
library(shiny)
library(shinyFeedback)
library(shinyjs)
library(shinyWidgets)
#library(colourpicker)
library(shinydashboard)
library(shinythemes)
library(shinydisconnect)
library(shinydashboardPlus)
#library(fresh)
#library(shinycssloaders)
library(tidyverse)
library(DT)
library(caret)
library(kernlab)
#library(skimr)
#library(plotly)
library(tidymodels)
library(keras)
library(compositions)
#library(ggThemeAssist)
library(lubridate)
#library(leaflet)
#library(scales)
#library(lattice)
#library(viridis) # for color palette
#library(htmltools)
#library(rdrop2)
#library(shinyjqui)
# you just need to run this part once (no need included in shinyapp code)
#drop_auth()
# for remote use (deploy app to shinyapps.io or rstudio connect), you can save your auth to rds and load it to host platform
#token <- drop_auth()
#saveRDS(token, file = "token.rds")
# this part should be included in your shinyapp code
#token <- readRDS("token.rds")
#drop_acc(dtoken = token)
# Get table metadata. For now, just the fields
# Further development: also define field types
# and create inpu
?shinydashboardPlus::dashboardHeader
runApp()
if (interactive()) {
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(
leftUi = tagList(
dropdownBlock(
id = "mydropdown",
title = "Dropdown 1",
icon = icon("sliders"),
sliderInput(
inputId = "n",
label = "Number of observations",
min = 10, max = 100, value = 30
),
prettyToggle(
inputId = "na",
label_on = "NAs kept",
label_off = "NAs removed",
icon_on = icon("check"),
icon_off = icon("remove")
)
),
dropdownBlock(
id = "mydropdown2",
title = "Dropdown 2",
icon = icon("sliders"),
prettySwitch(
inputId = "switch4",
label = "Fill switch with status:",
fill = TRUE,
status = "primary"
),
prettyCheckboxGroup(
inputId = "checkgroup2",
label = "Click me!",
thick = TRUE,
choices = c("Click me !", "Me !", "Or me !"),
animation = "pulse",
status = "info"
)
)
),
dropdownMenu(
type = "tasks",
badgeStatus = "danger",
taskItem(value = 20, color = "aqua", "Refactor code"),
taskItem(value = 40, color = "green", "Design new layout"),
taskItem(value = 60, color = "yellow", "Another task"),
taskItem(value = 80, color = "red", "Write documentation")
)
),
sidebar = dashboardSidebar(),
body = dashboardBody(
setShadow(class = "dropdown-menu")
),
title = "DashboardPage"
),
server = function(input, output) { }
)
}
[Package shinydashboardPlus version 2.0.3 Index]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('app')
runApp('app')
readRDS("data_fol_sol_imp_app.rds")
data2 <- readRDS("data_fol_sol_imp_app.rds")
runApp('app')
runApp('app')
data2 <- readRDS("data_fol_sol_imp_app.rds")
runApp('app')
