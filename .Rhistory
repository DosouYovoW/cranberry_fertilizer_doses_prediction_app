"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ..p.value.label.., ")")),
formula = formula1,
parse = TRUE) +
theme_bw(base_size = 16)
library(ggpmisc)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
formula1 <- y ~ poly(x, 2)
df <- iris |>
rename(x=Sepal.Length,
y =Sepal.Width)
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ..p.value.label.. ")")),
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ..p.value.label.., ")")),
formula = formula1,
parse = TRUE) +
theme_bw(base_size = 16)
library(ggpmisc)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
formula1 <- y ~ poly(x, 2)
df <- iris |>
rename(x=Sepal.Length,
y =Sepal.Width)
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
theme_bw(base_size = 16)
runApp()
runApp()
shiny::runApp()
?xgb_pred
??xgb_pred
model_Leaf_Fv_vs_AlZnMnFeCuBMgCaKPN_next
runApp()
## Next year xgboost models
model_Leaf_Fv_vs_AlZnMnFeCuBMgCaKPN_next <-
readRDS("next_year_list_xgboost/Model_Leaf_Fv.AlZnMnFeCuBMgCaKPN_next.rds")
model_Leaf_Fv_vs_AlZnMnFeCuBMgCaKPN_next
shiny::runApp()
plot(cars)
library(ggpmisc)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
formula1 <- y ~ poly(x, 2)
df <- iris |>
rename(x=Sepal.Length,
y =Sepal.Width)
library(ggpmisc)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
formula1 <- y ~ poly(x, 2)
df <- iris |>
rename(x=Sepal.Length,
y =Sepal.Width)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
iris
library(tydiverse)
library(tidyverse)
library(ggpmisc)
#set.seed(21318)
#df <- data.frame(x = c(1:100))
#df$y <- 2 + 3*df$x + rnorm(100, sd = 40)
iris
formula1 <- y ~ poly(x, 2)
df <- iris |>
rename(x=Sepal.Length,
y =Sepal.Width)
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
theme_bw(base_size = 16)
library(ggthemes)
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_base()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_calc()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_clean()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_economist()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_economist_white()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_economist()
?theme_economist
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_excel()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_excel_new()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_few()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_fivethirtyeight()
ggplot(data = df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = formula1) +
stat_fit_tb(method = "lm",
method.args = list(formula = formula1),
tb.vars = c(Parameter = "term",
Estimate = "estimate",
"s.e." = "std.error",
"italic(t)" = "statistic",
"italic(P)" = "p.value"),
label.y = "bottom", label.x = "right",
parse = TRUE) +
stat_poly_eq(aes(label = paste0("atop(", ..eq.label.., ",", ..rr.label.., ")")),
formula = formula1,
parse = TRUE) +
ggthemes::theme_foundation()
# Load the ggplot2 package
library(ggplot2)
# Create a sample ggplot2 plot with two legends
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)") +
theme(legend.position = "none", guide = "none")
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
theme(legend.position = "none", guide = "none")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
theme(legend.position = "none")
?theme
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
theme(guide = "none")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(size = FALSE)
?guides
at <- data.frame(x = 1:5, y = 1:5, p = 1:5, q = factor(1:5),
r = factor(1:5))
p <-
ggplot(dat, aes(x, y, colour = p, size = q, shape = r)) +
geom_point()
dat <- data.frame(x = 1:5, y = 1:5, p = 1:5, q = factor(1:5),
r = factor(1:5))
p <-
ggplot(dat, aes(x, y, colour = p, size = q, shape = r)) +
geom_point()
# without guide specification
p
p + guides(colour = "colorbar", size = "legend", shape = "legend")
p + guides(colour = guide_colorbar(), size = guide_legend(),
shape = guide_legend())
p +
scale_colour_continuous(guide = "colorbar") +
scale_size_discrete(guide = "legend") +
scale_shape(guide = "legend")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(size = FALSE, color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(size = FALSE, color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(size = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(color = FALSE)
# Load the ggplot2 package
library(ggplot2)
# Create a sample ggplot2 plot with two legends
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
guides(color = FALSE)
library(scales)
?scale_x_continuous
?scales::abs_area()
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::abs_area(c(1,3)))
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::abs_area(c(1,3)))
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::abs_area(range = c(1,3)))
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::alpha) +
guides(color = FALSE)
?scales::alpha
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::alpha("red", 0.1)) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::area_pal) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::col_quantile) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::comma) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::cscale) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::date_format) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar()) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar) +
guides(color = FALSE)
?scales::dollar
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar(prefix = "%")) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar(prefix = "$")) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar(x = wt, prefix = "$")) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar(x = "wt", prefix = "$")) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::Range) +
guides(color = FALSE)
# Remove the color legend by specifying the guide argument
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl, size = hp)) +
geom_point() +
labs(title = "Mileage vs. Weight", x = "Weight (lbs/1000)", y = "Mileage (mpg)")+
scale_x_continuous(labels = scales::dollar("&")) +
guides(color = FALSE)
