runApp()
runApp()
runApp()
?report
install.packages("report")
library(report)
?report()
model <- t.test(mpg ~ am, data = mtcars)
r <- report(model)
report(model)
report(model)
summary(r)
report::as.report(r)
report::cite_citation(r)
report::cite_packages(r)
?report()
compare_means(len ~ supp, df, paired = TRUE)
r <- report_table(sessionInfo())
r
summary(r)
report_table(iris$Sepal.Length)
report_table(iris$Sepal.Length)
report_table(as.character(round(iris$Sepal.Length, 1)))
report_table(iris$Species)
report_table(iris)
report_table(t.test(mpg ~ am, data = mtcars))
report_table(aov(Sepal.Length ~ Species, data = iris))
report_table(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
report_parameters(iris$Sepal.Length)
report_parameters(as.character(round(iris$Sepal.Length, 1)))
report_parameters(iris$Species)
report_parameters(iris)
report_parameters(t.test(iris$Sepal.Width, iris$Sepal.Length))
report_parameters(aov(Sepal.Length ~ Species, data = iris))
report_parameters(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
report_parameters(lm(Petal.Width ~ Species, data = iris), include_intercept = FALSE)
report_parameters(glm(vs ~ disp, data = mtcars, family = "binomial"))
if (require("lme4")) {
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
report_parameters(model)
}
report_statistics(iris$Sepal.Length)
report_statistics(as.character(round(iris$Sepal.Length, 1)))
report_statistics(iris$Species)
report_statistics(iris)
report_statistics(aov(Sepal.Length ~ Species, data = iris))
report_statistics(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
report_parameters(aov(Sepal.Length ~ Species, data = iris))
report_effectsize(t.test(iris$Sepal.Width, iris$Sepal.Length))
report_effectsize(aov(Sepal.Length ~ Species, data = iris))
report_effectsize(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
if (require("lme4")) {
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
report_effectsize(model)
}
report_model(t.test(iris$Sepal.Width, iris$Sepal.Length))
report_model(aov(Sepal.Length ~ Species, data = iris))
report_model(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
if (require("lme4")) {
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
r <- report_random(model)
r
summary(r)
}
report_performance(lm(Sepal.Length ~ Petal.Length * Species, data = iris))
if (require("lme4")) {
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
report_performance(model)
}
report_info(t.test(iris$Sepal.Width, iris$Sepal.Length))
report_info(aov(Sepal.Length ~ Species, data = iris))
if (require("lme4")) {
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
report_info(model)
}
report_text(iris$Sepal.Length)
library(ggpubr)
df3 <- ToothGrowth
p <- ggbarplot(df3, x = "dose", y = "len", fill = "supp",
add = "mean_se", palette = c("#00AFBB", "#E7B800"), lab.vjust = -0.7,
lab.hjust = 1.3,
label = TRUE,
position = position_dodge(), ggtheme = theme_bw())
#ggplotly(p)
p
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
install.packages("dlookr")
library(dlookr)
?dlookr::diagnose_report()
diagnose_report(heartfailure)
diagnose_report(heartfailure, output_format = "html")
install.packages("forcats")
install.packages("forecast")
library(forecats)
library(forecast)
?dlookr::diagnose_paged_report()
heartfailure2 <- dlookr::heartfailure
heartfailure2[sample(seq(NROW(heartfailure2)), 20), "sodium"] <- NA
heartfailure2[sample(seq(NROW(heartfailure2)), 5), "smoking"] <- NA
heartfailure2[sample(seq(NROW(heartfailure2)), 2), "time"] <- 0
heartfailure2[sample(seq(NROW(heartfailure2)), 1), "creatinine"] <- -0.3
diagnose_paged_report(heartfailure2)
cover <- file.path(system.file(package = "dlookr"), "report", "cover2.jpg")
diagnose_paged_report(heartfailure2, cover_img = cover, title_color = "gray",
output_file = "Diagn.pdf")
over <- file.path(system.file(package = "dlookr"), "report", "cover3.jpg")
diagnose_paged_report(heartfailure2, output_dir = ".", cover_img = cover,
flag_content_missing = FALSE, output_file = "Diagn.pdf", browse = FALSE)
diagnose_paged_report(heartfailure2, output_dir = ".", cover_img = cover,
flag_content_missing = FALSE, output_file = "Diagn.pdf", browse = FALSE)
diagnose_paged_report(heartfailure2, output_format = "html")
}
?dlookr::eda_report()
eda_report(heartfailure, death_event)
?dlookr::eda_web_report()
heartfailure2 <- dlookr::heartfailure
heartfailure2[sample(seq(NROW(heartfailure2)), 20), "sodium"] <- NA
heartfailure2[sample(seq(NROW(heartfailure2)), 5), "smoking"] <- NA
# create html file. file name is EDA_Report.html
eda_web_report(heartfailure2)
logo <- file.path(system.file(package = "dlookr"), "report", "R_logo_html.svg")
eda_web_report(heartfailure2, logo_img = logo, title_color = "black",
output_file = "EDA.html")
eda_web_report(heartfailure2, target = "death_event", output_dir = ".",
author = "Choonghyun Ryu", output_file = "EDA_heartfailure.html",
theme = "blue", browse = FALSE)
}
eda_web_report(heartfailure2, target = "death_event", output_dir = ".",
author = "Choonghyun Ryu", output_file = "EDA_heartfailure.html",
theme = "blue", browse = FALSE)
library(ggpubr)
df3 <- ToothGrowth
p <- ggbarplot(df3, x = "dose", y = "len", fill = "supp",
add = "mean_se", palette = c("#00AFBB", "#E7B800"), lab.vjust = -0.7,
lab.hjust = 1.3,
label = TRUE,
position = position_dodge(), ggtheme = theme_bw())
#ggplotly(p)
p
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight())
p2
mtcars
lm(am ~ mpg, mtcars)
summary(lm(am ~ mpg, mtcars))
?ggbetweenstats
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight())
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL)
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, results.subtitle = FALSE)
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE)
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.label = am)
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.label = mpg)
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE)
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.color = "blue")
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, mpg, am, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.color = "blue")
p2
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.color = "blue")
p2
mtcars
?t.test
#lm(am ~ mpg, mtcars)
test <- t.test(mpg ~ am, mtcars, alternative = "less")
#report::report(test)
#report(sessionInfo())
test <- t.test(mpg ~ am, mtcars, alternative = "less")
report::report(test)
#lm(am ~ mpg, mtcars)
test <- t.test(mpg ~ am, mtcars, alternative = "greater")
report::report(test)
#report(sessionInfo())
#lm(am ~ mpg, mtcars)
test <- t.test(mpg ~ am, mtcars, alternative = "less")
report::report(test)
#report(sessionInfo())
#lm(am ~ mpg, mtcars)
test <- t.test(mpg ~ am, mtcars, alternative = "two.sided")
report::report(test)
#report(sessionInfo())
library(ggstatsplot)
p2 <- ggbetweenstats(mtcars, am, mpg, ggtheme = ggthemes::theme_fivethirtyeight(), bf.prior = NULL, outlier.tagging = TRUE,
outlier.color = "blue")
p2
?ggstatsplot::ggbetweenstats()
if (require("PMCMRplus")) {
# to get reproducible results from bootstrapping
set.seed(123)
library(ggstatsplot)
# simple function call with the defaults
ggbetweenstats(mtcars, am, mpg)
ggbetweenstats(mtcars, am, mpg)
yuu
t
if (require("PMCMRplus")) {
# to get reproducible results from bootstrapping
set.seed(123)
library(ggstatsplot)
# simple function call with the defaults
ggbetweenstats(mtcars, am, mpg)
# more detailed function call
ggbetweenstats(
data = morley,
x = Expt,
y = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
outlier.tagging = TRUE,
outlier.label = Run
)
}
[Package ggstatsplot version 0.9.4 Index]
ggbetweenstats(mtcars, am, mpg)
ggbetweenstats(
data = morley,
x = Expt,
y = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
outlier.tagging = TRUE,
outlier.label = Run
)
?ggstatsplot::ggbarstats()
ggbarstats(mtcars, x = vs, y = cyl)
?ggstatsplot::ggcoefstats()
set.seed(123)
library(ggstatsplot)
library(lme4)
# model object
mod <- lm(formula = mpg ~ cyl * am, data = mtcars)
# to get a plot
ggcoefstats(mod, output = "plot")
ggcoefstats(mod, output = "tidy")
ggcoefstats(mod, output = "tidy")
ggcoefstats(mod, output = "glance")
ggcoefstats(lmer(Reaction ~ Days + (Days | Subject), sleepstudy), effects = "fixed")
?ggstatsplot::ggcorrmat()
ggcorrmat(
data = ggplot2::msleep,
cor.vars = sleep_total:bodywt,
partial = TRUE,
output = "dataframe"
)
?ggstatsplot::ggdotplotstats()
ggdotplotstats(
data = ggplot2::mpg,
x = cty,
y = manufacturer,
title = "Fuel economy data",
xlab = "city miles per gallon"
)
?ggstatsplot::gghistostats()
gghistostats(
data            = ToothGrowth,
x               = len,
xlab            = "Tooth length",
centrality.type = "np"
)
?ggstatsplot::ggpiestats()
ggpiestats(mtcars, x = vs)
ggpiestats(mtcars, x = vs, y = cyl)
?ggstatsplot::ggscatterstats()
ggscatterstats(
data = mtcars_new,
x = wt,
y = mpg,
label.var = car,
label.expression = wt < 4 & mpg < 20
) + # making further customization with `{ggplot2}` functions
geom_rug(sides = "b")
ggscatterstats(
data = mtcars_new,
x = wt,
y = mpg,
label.var = car,
label.expression = wt < 4 & mpg < 20
)
mtcars_new <- as_tibble(mtcars, rownames = "car")
ggscatterstats(
data = mtcars_new,
x = wt,
y = mpg,
label.var = car,
label.expression = wt < 4 & mpg < 20
) + # making further customization with `{ggplot2}` functions
geom_rug(sides = "b")
ggscatterstats(
data = mtcars_new,
x = wt,
y = mpg,
label.var = car,
label.expression = wt < 4 & mpg < 20
)
?ggstatsplot::ggwithinstats()
ggwithinstats(
data = filter(bugs_long, condition %in% c("HDHF", "HDLF")),
x    = condition,
y    = desire
)
y
?ggstatsplot::grouped_ggbarstats()
diamonds_short <- ggplot2::diamonds %>%
filter(cut %in% c("Very Good", "Ideal")) %>%
filter(clarity %in% c("SI1", "SI2", "VS1", "VS2")) %>%
sample_frac(size = 0.05)
# plot
grouped_ggbarstats(
data          = diamonds_short,
x             = color,
y             = clarity,
grouping.var  = cut,
plotgrid.args = list(nrow = 2)
)
?ggstatsplot::grouped_ggbetweenstats()
grouped_ggbetweenstats(
data = filter(ggplot2::mpg, drv != "4"),
x = year,
y = hwy,
grouping.var = drv
)
grouped_ggbetweenstats(
data = filter(
movies_long,
genre %in% c("Action", "Comedy"),
mpaa %in% c("R", "PG")
),
x = genre,
y = rating,
grouping.var = mpaa,
ggplot.component = scale_y_continuous(
breaks = seq(1, 9, 1),
limits = (c(1, 9))
)
)
?eda_report()
eda_report(heartfailure, death_event)
?eda_web_report()
heartfailure2 <- dlookr::heartfailure
heartfailure2[sample(seq(NROW(heartfailure2)), 20), "sodium"] <- NA
heartfailure2[sample(seq(NROW(heartfailure2)), 5), "smoking"] <- NA
# create html file. file name is EDA_Report.html
eda_web_report(heartfailure2)
eda_web_report(heartfailure2, author = "Wilfried Dossou-Yovo")
eda_web_report(heartfailure2, target = "death_event", output_dir = ".",
author = "Choonghyun Ryu", output_file = "EDA_heartfailure.html",
theme = "blue", browse = FALSE)
}
eda_web_report(heartfailure2, target = "death_event", output_dir = ".",
author = "Choonghyun Ryu", output_file = "EDA_heartfailure.html",
theme = "blue", browse = FALSE)
logo <- file.path(system.file(package = "dlookr"), "report", "R_logo_html.svg")
eda_web_report(heartfailure2, logo_img = logo, title_color = "black",
output_file = "EDA.html")
eda_web_report(heartfailure2, target = "death_event",
author = "Choonghyun Ryu", output_file = "EDA_heartfailure.html",
theme = "blue", browse = FALSE)
?dlookr::performance_bin()
heartfailure2 <- heartfailure
set.seed(123)
heartfailure2[sample(seq(NROW(heartfailure2)), 5), "creatinine"] <- NA
# Change the target variable to 0(negative) and 1(positive).
heartfailure2$death_event_2 <- ifelse(heartfailure2$death_event %in% "Yes", 1, 0)
# Binnig from creatinine to platelets_bin.
breaks <- c(0,  1,  2, 10)
heartfailure2$creatinine_bin <- cut(heartfailure2$creatinine, breaks)
# Diagnose performance binned variable
perf <- performance_bin(heartfailure2$death_event_2, heartfailure2$creatinine_bin)
perf
summary(perf)
plot(perf)
?dlookr::diagnose()
iables
diagnose(jobchange)
diagnose(jobchange, gender, experience, training_hours)
diagnose(jobchange, -gender, -experience, -training_hours)
diagnose(jobchange, "gender", "experience", "training_hours")
diagnose(jobchange, 4, 9, 13)
jobchange %>%
diagnose()
jobchange %>%
diagnose()
?dlookr::diagnose_report()
diagnose_report(heartfailure)
?dlookr::diagnose_numeric()
diagnose_numeric(heartfailure)
heartfailure %>%
diagnose_numeric()
heartfailure %>%
diagnose_numeric()  %>%
filter(outlier > 0)
?dlookr::describe()
heartfailure2 <- heartfailure
heartfailure2[sample(seq(NROW(heartfailure2)), 20), "sodium"] <- NA
heartfailure2[sample(seq(NROW(heartfailure2)), 5), "smoking"] <- NA
# Describe descriptive statistics of numerical variables
describe(heartfailure2)
?report::cite_citation()
citation <- "Makowski, D., Ben-Shachar, M. S., Patil, I., & Ludecke, D. (2020).
Methods and Algorithms for Correlation Analysis in R. Journal of Open Source
Software, 5(51), 2306."
format_citation(citation, authorsdate = TRUE)
library(report)
format_citation(citation, authorsdate = TRUE)
format_citation(citation, authorsdate = TRUE, short = TRUE)
format_citation(citation, authorsdate = TRUE, short = TRUE, intext = TRUE)
cite_citation(citation)
clean_citation(citation())
?report::as.report_effectsize()
?report::as.report_model()
?ggpubr::ggsummarystats()
data("ToothGrowth")
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Add random QC column
set.seed(123)
qc <- rep(c("pass", "fail"), 30)
df$qc <- as.factor(sample(qc, 60))
# Inspect the data
head(df)
summary.stats <- df %>%
group_by(dose) %>%
get_summary_stats(type = "common")
summary.stats
ggsummarytable(
summary.stats, x = "dose", y = c("n", "median", "iqr"),
ggtheme = theme_bw()
)
gsummarystats(
df, x = "dose", y = "len",
ggfunc = ggboxplot, add = "jitter"
)
ggsummarystats(
df, x = "dose", y = "len",
ggfunc = ggboxplot, add = "jitter"
)
ggsummarystats(
df, x = "dose", y = "len",
ggfunc = ggboxplot, add = "jitter",
color = "dose", palette = "npg"
)
ggsummarystats(
df, x = "dose", y = "len",
ggfunc = ggbarplot, add = c("jitter", "median_iqr"),
color = "dose", palette = "npg"
)
ggsummarystats(
df, x = "dose", y = "len",
ggfunc = ggboxplot, add = "jitter",
color = "dose", palette = "npg",
facet.by = c("supp", "qc"),
labeller = "label_both"
)
?ggpubr::ggbarplot()
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
print(df)
# Basic plot with label outsite
# +++++++++++++++++++++++++++
ggbarplot(df, x = "dose", y = "len",
label = TRUE, label.pos = "out")
ggbarplot(df, x = "dose", y = "len", width = 0.5)
ggbarplot(df, "dose", "len", orientation = "horiz")
ggbarplot(df, "dose", "len",
order = c("D2", "D1", "D0.5"))
ggbarplot(df, "dose", "len",
fill = "steelblue", color = "steelblue",
label = TRUE, lab.pos = "in", lab.col = "white")
ggbarplot(df, "dose", "len", color = "dose",
palette = c("#00AFBB", "#E7B800", "#FC4E07"))
ggbarplot(df, "dose", "len",
fill = "dose", color = "dose",
palette = c("#00AFBB", "#E7B800", "#FC4E07"))
df3 <- ToothGrowth
head(df3, 10)
ggbarplot(df3, x = "dose", y = "len",
add = c("mean_se", "dotplot"))
install.packages("sjPlot")
library(sjPlot)
?sjPlot::plot_frq()
library(sjlabelled)
data(efc)
data(iris)
plot_frq(iris, Species)
plot_frq(iris, Species) |> report()
shiny::runApp()
